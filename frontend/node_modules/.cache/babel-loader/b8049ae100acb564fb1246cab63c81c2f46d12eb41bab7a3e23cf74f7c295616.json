{"ast":null,"code":"// 导入axios库，用于发送HTTP请求\nimport axios from 'axios';\n\n// 定义API基础URL，指向后端服务地址\nconst API_BASE_URL = 'http://localhost:5001';\n\n// 创建axios实例，添加请求拦截器\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\n\n// 请求拦截器：添加认证token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器：处理认证错误\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n/**\n * 用户认证相关API\n */\n\n// 用户登录\nexport const login = async data => {\n  const response = await api.post('/auth/login', data);\n  return response.data;\n};\n\n// 用户注册\nexport const register = async data => {\n  const response = await api.post('/auth/register', data);\n  return response.data;\n};\n\n// 密码找回\nexport const forgotPassword = async data => {\n  const response = await api.post('/auth/forgot-password', data);\n  return response.data;\n};\n\n// 重置密码\nexport const resetPassword = async data => {\n  const response = await api.post('/auth/reset-password', data);\n  return response.data;\n};\n\n/**\n * 题目相关API\n */\n\n// 获取题目列表\nexport const getProblems = async (page = 1, perPage = 10, difficulty = '') => {\n  const params = {\n    page,\n    per_page: perPage\n  };\n  if (difficulty) params.difficulty = difficulty;\n  const response = await api.get('/problems', {\n    params\n  });\n  return response.data;\n};\n\n// 获取题目详情\nexport const getProblem = async problemId => {\n  const response = await api.get(`/problems/${problemId}`);\n  return response.data;\n};\n\n// 创建题目（教师权限）\nexport const createProblem = async data => {\n  const response = await api.post('/problems', data);\n  return response.data;\n};\n\n// 更新题目（教师权限）\nexport const updateProblem = async (problemId, data) => {\n  const response = await api.put(`/problems/${problemId}`, data);\n  return response.data;\n};\n\n// 删除题目（教师权限）\nexport const deleteProblem = async problemId => {\n  const response = await api.delete(`/problems/${problemId}`);\n  return response.data;\n};\n\n// 提交代码到后端服务\nexport const submitCode = async data => {\n  const response = await api.post('/submit', data);\n  return response.data;\n};\n\n// 获取代码提交结果\nexport const getResult = async submissionId => {\n  const response = await api.get(`/result/${submissionId}`);\n  return response.data;\n};\n\n// 获取提交历史\nexport const getSubmissions = async (page = 1, perPage = 20, problemId = null) => {\n  const params = {\n    page,\n    per_page: perPage\n  };\n  if (problemId) params.problem_id = problemId;\n  const response = await api.get('/submissions', {\n    params\n  });\n  return response.data;\n};\n\n/**\n * 用户管理相关API（教师权限）\n */\n\n// 获取用户列表\nexport const getUsers = async (page = 1, perPage = 20, role = null, classId = null, username = null, name = null) => {\n  const params = {\n    page,\n    per_page: perPage\n  };\n  if (role) params.role = role;\n  if (classId) params.class_id = classId;\n  if (username) params.username = username;\n  if (name) params.name = name;\n  const response = await api.get('/users', {\n    params\n  });\n  return response.data;\n};\n\n// 更新用户信息\nexport const updateUser = async (userId, data) => {\n  const response = await api.put(`/users/${userId}`, data);\n  return response.data;\n};\n\n// 删除用户\nexport const deleteUser = async userId => {\n  const response = await api.delete(`/users/${userId}`);\n  return response.data;\n};\n\n// 批量导入学生\nexport const batchImportStudents = async data => {\n  const response = await api.post('/users/batch-import', data);\n  return response.data;\n};\n\n/**\n * 组织架构相关API\n */\n\n// 获取学校列表\nexport const getSchools = async () => {\n  const response = await api.get('/schools');\n  return response.data;\n};\n\n// 获取专业列表\nexport const getMajors = async (schoolId = null) => {\n  const params = {};\n  if (schoolId) params.school_id = schoolId;\n  const response = await api.get('/majors', {\n    params\n  });\n  return response.data;\n};\n\n// 获取班级列表\nexport const getClasses = async (majorId = null) => {\n  const params = {};\n  if (majorId) params.major_id = majorId;\n  const response = await api.get('/classes', {\n    params\n  });\n  return response.data;\n};\n\n// AI生成题目（延长超时至60秒）\nexport const aiGenerateProblem = async requirements => {\n  const response = await api.post('/problems/ai-generate', {\n    requirements\n  }, {\n    timeout: 60000\n  });\n  return response.data;\n};\n\n// 预览AI生成的题目（延长超时至60秒）\nexport const aiPreviewProblem = async problemData => {\n  const response = await api.post('/problems/ai-preview', problemData, {\n    timeout: 60000\n  });\n  return response.data;\n};\n\n// AI验证并创建题目（延长超时至60秒）\nexport const aiValidateAndCreateProblem = async problemData => {\n  const response = await api.post('/problems/ai-validate', problemData, {\n    timeout: 60000\n  });\n  return response.data;\n};\n\n// 获取AI生成历史（延长超时至60秒，以防慢查询）\nexport const getAiHistory = async () => {\n  const response = await api.get('/problems/ai-history', {\n    timeout: 60000\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","data","post","register","forgotPassword","resetPassword","getProblems","page","perPage","difficulty","params","per_page","get","getProblem","problemId","createProblem","updateProblem","put","deleteProblem","delete","submitCode","getResult","submissionId","getSubmissions","problem_id","getUsers","role","classId","username","name","class_id","updateUser","userId","deleteUser","batchImportStudents","getSchools","getMajors","schoolId","school_id","getClasses","majorId","major_id","aiGenerateProblem","requirements","aiPreviewProblem","problemData","aiValidateAndCreateProblem","getAiHistory"],"sources":["/Volumes/坞城/Judger_1/frontend/src/services/api.js"],"sourcesContent":["// 导入axios库，用于发送HTTP请求\nimport axios from 'axios';\n\n// 定义API基础URL，指向后端服务地址\nconst API_BASE_URL = 'http://localhost:5001';\n\n// 创建axios实例，添加请求拦截器\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n});\n\n// 请求拦截器：添加认证token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器：处理认证错误\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n/**\n * 用户认证相关API\n */\n\n// 用户登录\nexport const login = async (data) => {\n  const response = await api.post('/auth/login', data);\n  return response.data;\n};\n\n// 用户注册\nexport const register = async (data) => {\n  const response = await api.post('/auth/register', data);\n  return response.data;\n};\n\n// 密码找回\nexport const forgotPassword = async (data) => {\n  const response = await api.post('/auth/forgot-password', data);\n  return response.data;\n};\n\n// 重置密码\nexport const resetPassword = async (data) => {\n  const response = await api.post('/auth/reset-password', data);\n  return response.data;\n};\n\n/**\n * 题目相关API\n */\n\n// 获取题目列表\nexport const getProblems = async (page = 1, perPage = 10, difficulty = '') => {\n  const params = { page, per_page: perPage };\n  if (difficulty) params.difficulty = difficulty;\n  \n  const response = await api.get('/problems', { params });\n  return response.data;\n};\n\n// 获取题目详情\nexport const getProblem = async (problemId) => {\n  const response = await api.get(`/problems/${problemId}`);\n  return response.data;\n};\n\n// 创建题目（教师权限）\nexport const createProblem = async (data) => {\n  const response = await api.post('/problems', data);\n  return response.data;\n};\n\n\n// 更新题目（教师权限）\nexport const updateProblem = async (problemId, data) => {\n  const response = await api.put(`/problems/${problemId}`, data);\n  return response.data;\n};\n\n// 删除题目（教师权限）\nexport const deleteProblem = async (problemId) => {\n  const response = await api.delete(`/problems/${problemId}`);\n  return response.data;\n};\n\n// 提交代码到后端服务\nexport const submitCode = async (data) => {\n  const response = await api.post('/submit', data);\n  return response.data;\n};\n\n// 获取代码提交结果\nexport const getResult = async (submissionId) => {\n  const response = await api.get(`/result/${submissionId}`);\n  return response.data;\n};\n\n// 获取提交历史\nexport const getSubmissions = async (page = 1, perPage = 20, problemId = null) => {\n  const params = { page, per_page: perPage };\n  if (problemId) params.problem_id = problemId;\n  \n  const response = await api.get('/submissions', { params });\n  return response.data;\n};\n\n/**\n * 用户管理相关API（教师权限）\n */\n\n// 获取用户列表\nexport const getUsers = async (\n  page = 1,\n  perPage = 20,\n  role = null,\n  classId = null,\n  username = null,\n  name = null\n) => {\n  const params = { page, per_page: perPage };\n  if (role) params.role = role;\n  if (classId) params.class_id = classId;\n  if (username) params.username = username;\n  if (name) params.name = name;\n  const response = await api.get('/users', { params });\n  return response.data;\n};\n\n// 更新用户信息\nexport const updateUser = async (userId, data) => {\n  const response = await api.put(`/users/${userId}`, data);\n  return response.data;\n};\n\n// 删除用户\nexport const deleteUser = async (userId) => {\n  const response = await api.delete(`/users/${userId}`);\n  return response.data;\n};\n\n// 批量导入学生\nexport const batchImportStudents = async (data) => {\n  const response = await api.post('/users/batch-import', data);\n  return response.data;\n};\n\n/**\n * 组织架构相关API\n */\n\n// 获取学校列表\nexport const getSchools = async () => {\n  const response = await api.get('/schools');\n  return response.data;\n};\n\n// 获取专业列表\nexport const getMajors = async (schoolId = null) => {\n  const params = {};\n  if (schoolId) params.school_id = schoolId;\n  \n  const response = await api.get('/majors', { params });\n  return response.data;\n};\n\n// 获取班级列表\nexport const getClasses = async (majorId = null) => {\n  const params = {};\n  if (majorId) params.major_id = majorId;\n  \n  const response = await api.get('/classes', { params });\n  return response.data;\n};\n\n// AI生成题目（延长超时至60秒）\nexport const aiGenerateProblem = async (requirements) => {\n  const response = await api.post('/problems/ai-generate', { requirements }, { timeout: 60000 });\n  return response.data;\n};\n\n// 预览AI生成的题目（延长超时至60秒）\nexport const aiPreviewProblem = async (problemData) => {\n  const response = await api.post('/problems/ai-preview', problemData, { timeout: 60000 });\n  return response.data;\n};\n\n// AI验证并创建题目（延长超时至60秒）\nexport const aiValidateAndCreateProblem = async (problemData) => {\n  const response = await api.post('/problems/ai-validate', problemData, { timeout: 60000 });\n  return response.data;\n};\n\n// 获取AI生成历史（延长超时至60秒，以防慢查询）\nexport const getAiHistory = async () => {\n  const response = await api.get('/problems/ai-history', { timeout: 60000 });\n  return response.data;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}